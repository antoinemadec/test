#!/usr/bin/env python3

import re
import sys
import operator


class Node:
    def __init__(self, name):
        self.name = name
        self.children = []
        self.branches = []

    def add_child(self, obj, weight):
        self.children.append((obj, weight))

    def find_branches(self):
        """
        return branches of this node, such as:
          ( ([b0_nodes], b0_weight), ..., ([bn_nodes], bn_weight) )
        """
        if self.children == []:
            return (([self.name], 0),)
        else:
            if self.branches == [] or no_cache:
                for (obj, weight) in self.children:
                    for (child_nodes, child_weight) in obj.find_branches():
                        self.branches.append(([self.name] + child_nodes, weight + child_weight))
            return self.branches


node_dict = {}


def create_node(name):
    if not name in node_dict:
        node_dict[name] = Node(name)


def import_tree(filename):
    fd = open(filename, "r")
    for line in fd:
        m = re.match("(.*)\s*:\s*(.*)", line)
        if m == None:
            sys.exit("error parsing %s" % filename)
        parent = m.groups()[0]
        string = m.groups()[1]
        create_node(parent)
        while True:
            m = re.match("\s*(\w)(\w)\s*(.*)", string)
            if m != None:
                child = m.groups()[0]
                weight = int(m.groups()[1])
                string = m.groups()[2]
                create_node(child)
                node_dict[parent].add_child(node_dict[child], weight)
            else:
                break


if len(sys.argv) == 2:
    no_cache = True
else:
    no_cache = False
import_tree("tree.txt")
all_branches = node_dict["A"].find_branches()
heaviest_branch = max(all_branches, key=operator.itemgetter(1))
print(heaviest_branch)
